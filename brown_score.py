# -*- coding: utf-8 -*-
"""Brown-score.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17MUqwkM-KItII19SgZFMSLvv3KfQSa3P
"""

from PIL import Image
from matplotlib.patches import Rectangle
import numpy as np
import matplotlib.pyplot as plt
from skimage import io
from PIL import Image
import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import cv2
import matplotlib.image as mpimg
from matplotlib.patches import Rectangle
from matplotlib import pyplot as plt
import seaborn as sns
import albumentations as A
from skimage.exposure import rescale_intensity


import numpy as np
import matplotlib.pyplot as plt

from skimage import data
from skimage.color import rgb2hed, hed2rgb

def get_brown_score(im, x1, y1, x2, y2):

    # Check data type of input array and convert to appropriate data type
    if im.dtype == np.float64:
        im = (im * 255).astype(np.uint8)

    # Convert NumPy array to PIL Image object
    im = Image.fromarray(im)

    # Crop image to bounding box
    crop_im = im.crop((x1, y1, x2, y2))
    
    # Convert image to RGB
    crop_im = crop_im.convert("RGB")
    
    # Initialize brown pixel count
    brown_pixels = 0
    
    # Iterate over all pixels in the bounding box
    for x in range(crop_im.size[0]):
        for y in range(crop_im.size[1]):
            # Get RGB values of the pixel
            r, g, b = crop_im.getpixel((x, y))
            
            # Check if pixel is brown (within a certain range of R, G, B values)
            if 128 <= r <= 255 and 0 <= g <= 128 and 0 <= b <= 128:
                brown_pixels += 1
    
    # Calculate brown score (ratio of brown pixels to total pixels)
    brown_score = brown_pixels / (crop_im.size[0] * crop_im.size[1])
    
    return brown_score

def get_brown_scores(ihc_d, bounding_boxes):
    # Initialize list to store brown scores for each bounding box
    brown_scores = []
    
    for box in bounding_boxes:
        # Get coordinates of the bounding box
        x1, y1, x2, y2 = box
        
        # Calculate brown score for the bounding box
        brown_score = get_brown_score(ihc_d, x1, y1, x2, y2)
        
        # Add brown score to list
        brown_scores.append(brown_score)
    
    return brown_scores